// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var E, GE, IS, QuarantinedKeyRing, SigChain, TmpKeyRing, TrackWrapper, TrackerProofGen, UntrackerProofGen, User, athrow, chain_err, constants, db, deepeq, env, filter, fpeq, iced, load_key, log, make_esc, master_ring, req, session, unix_time, __iced_k, __iced_k_noop, _ref, _ref1, _ref2, _ref3, _ref4;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  req = require('./req');

  db = require('./db');

  constants = require('./constants').constants;

  _ref = require('iced-error'), chain_err = _ref.chain_err, make_esc = _ref.make_esc;

  _ref1 = require('./err'), GE = _ref1.GE, E = _ref1.E;

  deepeq = require('deep-equal');

  SigChain = require('./sigchain').SigChain;

  log = require('./log');

  _ref2 = require('./sigs'), UntrackerProofGen = _ref2.UntrackerProofGen, TrackerProofGen = _ref2.TrackerProofGen;

  session = require('./session').session;

  env = require('./env').env;

  TrackWrapper = require('./trackwrapper').TrackWrapper;

  _ref3 = require('pgp-utils').util, fpeq = _ref3.fpeq, unix_time = _ref3.unix_time;

  _ref4 = require('./keyring'), QuarantinedKeyRing = _ref4.QuarantinedKeyRing, TmpKeyRing = _ref4.TmpKeyRing, load_key = _ref4.load_key, master_ring = _ref4.master_ring;

  athrow = require('iced-utils').util.athrow;

  IS = constants.import_state;

  filter = function(d, v) {
    var k, out, _i, _len;
    out = {};
    for (_i = 0, _len = v.length; _i < _len; _i++) {
      k = v[_i];
      if (d != null) {
        out[k] = d[k];
      }
    }
    return out;
  };

  exports.User = User = (function() {
    User.FIELDS = ["basics", "public_keys", "id", "sigs", "private_keys", "logged_in"];

    function User(args) {
      var k, _i, _len, _ref5;
      _ref5 = User.FIELDS;
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        k = _ref5[_i];
        this[k] = args[k];
      }
      this._dirty = false;
      this.sig_chain = null;
    }

    User.prototype.set_logged_in = function() {
      return this.logged_in = session.logged_in();
    };

    User.prototype.set_is_self = function(b) {
      return this._is_self = b;
    };

    User.prototype.is_self = function() {
      return this._is_self;
    };

    User.prototype.to_obj = function() {
      var k, out, _i, _len, _ref5;
      out = {};
      _ref5 = User.FIELDS;
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        k = _ref5[_i];
        out[k] = this[k];
      }
      return out;
    };

    User.prototype.public_key_bundle = function() {
      var _ref5, _ref6;
      return (_ref5 = this.public_keys) != null ? (_ref6 = _ref5.primary) != null ? _ref6.bundle : void 0 : void 0;
    };

    User.prototype.private_key_bundle = function() {
      var _ref5, _ref6;
      return (_ref5 = this.private_keys) != null ? (_ref6 = _ref5.primary) != null ? _ref6.bundle : void 0 : void 0;
    };

    User.prototype.names = function() {
      var fp, ki64, ret;
      ret = [
        {
          type: constants.lookups.username,
          name: this.basics.username
        }
      ];
      if ((ki64 = this.key_id_64()) != null) {
        ret.push({
          type: constants.lookups.key_id_64_to_user,
          name: ki64
        });
      }
      if ((fp = this.fingerprint(false)) != null) {
        ret.push({
          type: constants.lookups.key_fingerprint_to_user,
          name: fp
        });
      }
      return ret;
    };

    User.prototype.store = function(force_store, cb) {
      var err, un, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      un = this.username();
      (function(_this) {
        return (function(__iced_k) {
          if (force_store || _this._dirty) {
            log.debug("+ " + un + ": storing user to local DB");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/user.iced",
                funcname: "User.store"
              });
              db.put({
                key: _this.id,
                value: _this.to_obj(),
                names: _this.names()
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 80
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(log.debug("- " + un + ": stored user to local DB"));
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if ((_this.sig_chain != null) && (err == null)) {
              log.debug("+ " + un + ": storing signature chain");
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/node-client/src/user.iced",
                  funcname: "User.store"
                });
                _this.sig_chain.store(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err = arguments[0];
                    };
                  })(),
                  lineno: 84
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(log.debug("- " + un + ": stored signature chain"));
              });
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(err);
          });
        };
      })(this));
    };

    User.prototype.update_fields = function(remote) {
      var k, _i, _len, _ref5;
      _ref5 = User.FIELDS;
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        k = _ref5[_i];
        this.update_field(remote, k);
      }
      return true;
    };

    User.prototype.update_field = function(remote, which) {
      if (!(deepeq(this[which], remote[which]))) {
        this[which] = remote[which];
        return this._dirty = true;
      }
    };

    User.prototype.load_sig_chain_from_storage = function(cb) {
      var err, ph, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref5;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      log.debug("+ load sig chain from local storage");
      this.last_sig = ((_ref5 = this.sigs) != null ? _ref5.last : void 0) || {
        seqno: 0
      };
      (function(_this) {
        return (function(__iced_k) {
          if ((ph = _this.last_sig.payload_hash) != null) {
            log.debug("| loading sig chain w/ payload hash " + ph);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/user.iced",
                funcname: "User.load_sig_chain_from_storage"
              });
              SigChain.load(_this.id, ph, __iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    err = arguments[0];
                    return __slot_1.sig_chain = arguments[1];
                  };
                })(_this),
                lineno: 110
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            log.debug("| No payload hash tail pointer found");
            return __iced_k(_this.sig_chain = new SigChain(_this.id));
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- loaded sig chain from local storage");
          return cb(err);
        };
      })(this));
    };

    User.prototype.load_full_sig_chain = function(cb) {
      var err, sc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ load full sig chain");
      sc = new SigChain(this.id);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.load_full_sig_chain"
          });
          sc.update(null, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 122
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            _this.sig_chain = sc;
          }
          log.debug("- loaded full sig chain");
          return cb(err);
        };
      })(this));
    };

    User.prototype.update_sig_chain = function(remote, cb) {
      var did_update, err, seqno, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref5, _ref6;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      seqno = remote != null ? (_ref5 = remote.sigs) != null ? (_ref6 = _ref5.last) != null ? _ref6.seqno : void 0 : void 0 : void 0;
      log.debug("+ update sig chain; seqno=" + seqno);
      this.sigs || (this.sigs = {});
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.update_sig_chain"
          });
          _this.sig_chain.update(seqno, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return did_update = arguments[1];
              };
            })(),
            lineno: 133
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (did_update) {
            _this.sigs.last = _this.sig_chain.last().export_to_user();
            log.debug("| update sig_chain last link to " + (JSON.stringify(_this.sigs)));
            _this._dirty = true;
          }
          log.debug("- updated sig chain");
          return cb(err);
        };
      })(this));
    };

    User.prototype.update_with = function(remote, cb) {
      var a, b, err, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref5, _ref6;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      log.debug("+ updating local user w/ remote");
      a = (_ref5 = this.basics) != null ? _ref5.id_version : void 0;
      b = remote != null ? (_ref6 = remote.basics) != null ? _ref6.id_version : void 0 : void 0;
      if ((b == null) || a > b) {
        err = new E.VersionRollbackError("Server version-rollback suspected: Local " + a + " > " + b);
      } else if ((a == null) || (a < b) || (session.logged_in() && !this.logged_in)) {
        log.debug("| version update needed: " + a + " vs. " + b + " (logged_in=" + this.logged_in + ")");
        this.update_fields(remote);
      } else if (a !== b) {
        err = new E.CorruptionError("Bad ids on user objects: " + a.id + " != " + b.id);
      }
      (function(_this) {
        return (function(__iced_k) {
          if (err == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/user.iced",
                funcname: "User.update_with"
              });
              _this.update_sig_chain(remote, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 159
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- finished update");
          return cb(err);
        };
      })(this));
    };

    User.map_key_to_user_local = function(query, cb) {
      var b, err, k, ret, rows, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.map_key_to_user_local"
          });
          db.lookup(query, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return rows = arguments[1];
              };
            })(),
            lineno: 169
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          k = JSON.stringify(query);
          if (err != null) {

          } else if ((typeof rows === "undefined" || rows === null) || rows.length === 0) {
            err = new E.NotFoundError("Key not found for query " + k);
          } else if (rows.length > 1) {
            err = new E.CorruptionError("Too many users for key " + k + ": " + rows.length);
          } else {
            b = rows[0].basics;
            ret = {
              uid: b.uid,
              username: b.username
            };
          }
          return cb(err, ret);
        };
      })(this));
    };

    User.map_key_to_user = function(query, cb) {
      var basics, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ map_key_to_user: " + (JSON.stringify(query)));
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.map_key_to_user"
          });
          User.map_key_to_user_local(query, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return basics = arguments[1];
              };
            })(),
            lineno: 185
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (typeof err !== "undefined" && err !== null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/node-client/src/user.iced",
                  funcname: "User.map_key_to_user"
                });
                User.map_key_to_user_remote(query, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return basics = arguments[1];
                    };
                  })(),
                  lineno: 186
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            log.debug("- mapped -> " + err);
            return cb(err, basics);
          });
        };
      })(this));
    };

    User.map_key_to_user_remote = function(query, cb) {
      var L, body, d, err, key, qs, req_args, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      qs = JSON.stringify(query);
      log.debug("+ " + qs + ": map to username");
      err = null;
      L = constants.lookups;
      body = null;
      key = (function() {
        switch (query.type) {
          case L.key_fingerprint_to_user:
            return 'fingerprint';
          case L.key_id_64_to_user:
            return 'pgp_key_id';
          default:
            err = new E.BadQueryError("Bad query type: " + query.type);
            return null;
        }
      })();
      (function(_this) {
        return (function(__iced_k) {
          if (err == null) {
            d = {};
            d[key] = query.name;
            req_args = {
              endpoint: "key/basics",
              args: d
            };
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/user.iced",
                funcname: "User.map_key_to_user_remote"
              });
              req.get(req_args, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return body = arguments[1];
                  };
                })(),
                lineno: 210
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- " + qs + ": map -> " + err);
          return cb(err, body);
        };
      })(this));
    };

    User.load = function(_arg, cb) {
      var changed, err, esc, force_store, k, ki64, local, remote, require_public_key, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, ki64 = _arg.ki64, require_public_key = _arg.require_public_key;
      esc = make_esc(cb, "User::load");
      k = username != null ? username : "Key: " + ki64;
      log.debug("+ " + username + ": load user");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.load"
          });
          User.load_from_storage({
            username: username,
            ki64: ki64
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return local = arguments[0];
              };
            })(),
            lineno: 221
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref5;
          if (username == null) {
            username = typeof local !== "undefined" && local !== null ? (_ref5 = local.basics) != null ? _ref5.username : void 0 : void 0;
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/node-client/src/user.iced",
              funcname: "User.load"
            });
            User.load_from_server({
              username: username
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return remote = arguments[0];
                };
              })(),
              lineno: 225
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              var _ref6;
              if (require_public_key && (((_ref6 = remote.public_keys) != null ? _ref6.primary : void 0) == null)) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/node-client/src/user.iced",
                    funcname: "User.load"
                  });
                  athrow(new Error("user doesn't have a public key"), esc(__iced_deferrals.defer({
                    lineno: 228
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              changed = true;
              force_store = false;
              (function(__iced_k) {
                if (typeof local !== "undefined" && local !== null) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase/node-client/src/user.iced",
                      funcname: "User.load"
                    });
                    local.update_with(remote, esc(__iced_deferrals.defer({
                      lineno: 233
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  (function(__iced_k) {
                    if (typeof remote !== "undefined" && remote !== null) {
                      local = remote;
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/home/max/src/keybase/node-client/src/user.iced",
                          funcname: "User.load"
                        });
                        local.load_full_sig_chain(esc(__iced_deferrals.defer({
                          lineno: 236
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        return __iced_k(force_store = true);
                      });
                    } else {
                      return __iced_k(err = new E.UserNotFoundError("User " + username + " wasn't found"));
                    }
                  })(__iced_k);
                }
              })(function() {
                (function(__iced_k) {
                  if (typeof err === "undefined" || err === null) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/home/max/src/keybase/node-client/src/user.iced",
                        funcname: "User.load"
                      });
                      local.store(force_store, esc(__iced_deferrals.defer({
                        lineno: 241
                      })));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(function() {
                  log.debug("- " + username + ": loaded user");
                  return cb(err, local);
                });
              });
            });
          });
        };
      })(this));
    };

    User.load_from_server = function(_arg, cb) {
      var args, body, err, ret, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      log.debug("+ " + username + ": load user from server");
      args = {
        endpoint: "user/lookup",
        args: {
          username: username
        }
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.load_from_server"
          });
          req.get(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 253
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          ret = null;
          if (typeof err === "undefined" || err === null) {
            ret = new User(body.them);
            ret.set_logged_in();
          }
          log.debug("- " + username + ": loaded user from server");
          return cb(err, ret);
        };
      })(this));
    };

    User.load_from_storage = function(_arg, cb) {
      var err, ki64, name, ret, row, type, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, ki64 = _arg.ki64;
      name = username || ki64;
      log.debug("+ " + name + ": load user from local storage");
      type = username != null ? constants.lookups.username : constants.lookups.key_id_64_to_user;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.load_from_storage"
          });
          db.lookup({
            type: type,
            name: name
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return row = arguments[1];
              };
            })(),
            lineno: 267
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if ((typeof err === "undefined" || err === null) && (typeof row !== "undefined" && row !== null)) {
              ret = new User(row.value);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/node-client/src/user.iced",
                  funcname: "User.load_from_storage"
                });
                ret.load_sig_chain_from_storage(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err = arguments[0];
                    };
                  })(),
                  lineno: 270
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(typeof err !== "undefined" && err !== null ? ret = null : void 0);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            log.debug("- " + name + ": loaded user from local storage -> " + err + " / " + ret);
            return cb(err, ret);
          });
        };
      })(this));
    };

    User.prototype.fingerprint = function(upper_case) {
      var _ref5, _ref6, _ref7, _ref8;
      if (upper_case == null) {
        upper_case = false;
      }
      if (this._fingerprint == null) {
        this._fingerprint = {
          lc: (_ref5 = this.public_keys) != null ? (_ref6 = _ref5.primary) != null ? (_ref7 = _ref6.key_fingerprint) != null ? _ref7.toLowerCase() : void 0 : void 0 : void 0
        };
        this._fingerprint.uc = (_ref8 = this._fingerprint.lc) != null ? _ref8.toUpperCase() : void 0;
      }
      return this._fingerprint[upper_case ? 'uc' : 'lc'];
    };

    User.prototype.key_id_64 = function() {
      var fp;
      if ((fp = this.fingerprint(false)) != null) {
        return fp.slice(-16);
      } else {
        return null;
      }
    };

    User.load_me = function(opts, cb) {
      var esc, me, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "User::load_me");
      log.debug("+ User::load_me");
      (function(_this) {
        return (function(__iced_k) {
          if ((username = env().get_username()) == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/user.iced",
                funcname: "User.load_me"
              });
              athrow(new E.NoUsernameError("no username for current user; try `keybase login`"), esc(__iced_deferrals.defer({
                lineno: 309
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/node-client/src/user.iced",
              funcname: "User.load_me"
            });
            User.load({
              username: username
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return me = arguments[0];
                };
              })(),
              lineno: 310
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/user.iced",
                funcname: "User.load_me"
              });
              me._load_me_2(opts, esc(__iced_deferrals.defer({
                lineno: 311
              })));
              __iced_deferrals._fulfill();
            })(function() {
              log.debug("- User::load_me");
              return cb(null, me);
            });
          });
        };
      })(this));
    };

    User.prototype._load_me_2 = function(_arg, cb) {
      var do_install, err, esc, install_key, secret, un, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      secret = _arg.secret, install_key = _arg.install_key;
      esc = make_esc(cb, "User::_load_me_2");
      this.set_is_self(true);
      this.key = master_ring().make_key_from_user(this, secret);
      un = this.username();
      log.debug("+ " + un + ": checking public key");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User._load_me_2"
          });
          _this.key.find(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 324
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- " + un + ": checked public key");
          (function(__iced_k) {
            if ((typeof err !== "undefined" && err !== null) && (err instanceof E.NoLocalKeyError) && install_key) {
              return __iced_k(do_install = true);
            } else {
              (function(__iced_k) {
                if (typeof err !== "undefined" && err !== null) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase/node-client/src/user.iced",
                      funcname: "User._load_me_2"
                    });
                    athrow(err, esc(__iced_deferrals.defer({
                      lineno: 330
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k(do_install = false);
                }
              })(__iced_k);
            }
          })(function() {
            log.debug("+ " + un + ": verifying user and signatures");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/user.iced",
                funcname: "User._load_me_2"
              });
              _this.verify(esc(__iced_deferrals.defer({
                lineno: 335
              })));
              __iced_deferrals._fulfill();
            })(function() {
              log.debug("- " + un + ": verified users and signatures");
              (function(__iced_k) {
                if (do_install) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase/node-client/src/user.iced",
                      funcname: "User._load_me_2"
                    });
                    _this.key.commit({}, esc(__iced_deferrals.defer({
                      lineno: 339
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    User.prototype.check_key = function(_arg, cb) {
      var err, key, ret, secret, store, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      secret = _arg.secret, store = _arg.store;
      ret = {};
      log.debug("+ " + (this.username()) + ": check public key");
      (function(_this) {
        return (function(__iced_k) {
          if (_this.fingerprint() != null) {
            ret.remote = !secret || (_this.private_key_bundle() != null);
            key = master_ring().make_key_from_user(_this, secret);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/user.iced",
                funcname: "User.check_key"
              });
              key.find(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 352
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(typeof err === "undefined" || err === null ? (ret.local = true, store ? _this.key = key : void 0) : err instanceof E.NoLocalKeyError ? (err = null, ret.local = false) : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- " + (_this.username()) + ": check_public_key: ret=" + (JSON.stringify(ret)) + "; err=" + err);
          return cb(err, ret);
        };
      })(this));
    };

    User.prototype.load_public_key = function(_arg, cb) {
      var err, query, signer, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      signer = _arg.signer;
      log.debug("+ load public key for " + (this.username()));
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.key == null) {
            query = {
              username: _this.username(),
              fingerprint: _this.fingerprint()
            };
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/user.iced",
                funcname: "User.load_public_key"
              });
              load_key(query, __iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    err = arguments[0];
                    return __slot_1.key = arguments[1];
                  };
                })(_this),
                lineno: 369
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- load public key; found=" + (!!_this.key) + "; err=" + err);
          return cb(err, _this.key);
        };
      })(this));
    };

    User.prototype.username = function() {
      return this.basics.username;
    };

    User.prototype.reference_public_key = function(_arg, cb) {
      var keyring;
      keyring = _arg.keyring;
      return this.key = keyring.make_key_from_user(this, false);
    };

    User.prototype.import_public_key = function(_arg, cb) {
      var err, keyring, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      keyring = _arg.keyring;
      log.debug("+ Import public key from " + (keyring.to_string()));
      this.key = keyring.make_key_from_user(this, false);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.import_public_key"
          });
          _this.key.save(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 387
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- Import public key from " + (keyring.to_string()));
          return cb(err, _this.key);
        };
      })(this));
    };

    User.prototype.check_remote_proofs = function(opts, cb) {
      var err, n_proofs, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      opts.pubkey = this.key;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.check_remote_proofs"
          });
          _this.sig_chain.check_remote_proofs(opts, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                warnings = arguments[1];
                return n_proofs = arguments[2];
              };
            })(),
            lineno: 395
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, warnings, n_proofs);
        };
      })(this));
    };

    User.prototype.verify = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.verify"
          });
          _this.sig_chain.verify_sig({
            key: _this.key
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 402
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    User.prototype.list_remote_proofs = function() {
      var _ref5;
      return (_ref5 = this.sig_chain) != null ? _ref5.list_remote_proofs() : void 0;
    };

    User.prototype.gen_remote_proof_gen = function(_arg, cb) {
      var arg, esc, g, klass, remote_name_normalized, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      klass = _arg.klass, remote_name_normalized = _arg.remote_name_normalized;
      esc = make_esc(cb, "User::gen_remote_proof_gen");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.gen_remote_proof_gen"
          });
          _this.load_public_key({}, esc(__iced_deferrals.defer({
            lineno: 413
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          arg = {
            km: _this.key,
            remote_name_normalized: remote_name_normalized
          };
          g = new klass(arg);
          return cb(null, g);
        };
      })(this));
    };

    User.prototype.gen_track_proof_gen = function(_arg, cb) {
      var arg, esc, g, klass, last_link, track_obj, uid, untrack_obj, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      uid = _arg.uid, track_obj = _arg.track_obj, untrack_obj = _arg.untrack_obj;
      esc = make_esc(cb, "User::gen_track_proof_gen");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.gen_track_proof_gen"
          });
          _this.load_public_key({}, esc(__iced_deferrals.defer({
            lineno: 422
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref5;
          last_link = (_ref5 = _this.sig_chain) != null ? _ref5.true_last() : void 0;
          klass = untrack_obj != null ? UntrackerProofGen : TrackerProofGen;
          arg = {
            km: _this.key,
            seqno: (last_link != null ? last_link.seqno() + 1 : 1),
            prev: (last_link != null ? last_link.id : null),
            uid: uid
          };
          if (track_obj != null) {
            arg.track = track_obj;
          }
          if (untrack_obj != null) {
            arg.untrack = untrack_obj;
          }
          g = new klass(arg);
          return cb(null, g);
        };
      })(this));
    };

    User.prototype.gen_track_obj = function() {
      var out, pkp, _ref5, _ref6, _ref7;
      pkp = this.public_keys.primary;
      out = {
        basics: filter(this.basics, ["id_version", "last_id_change", "username"]),
        id: this.id,
        key: filter(pkp, ["kid", "key_fingerprint"]),
        seq_tail: (_ref5 = this.sig_chain) != null ? (_ref6 = _ref5.true_last()) != null ? _ref6.to_track_obj() : void 0 : void 0,
        remote_proofs: (_ref7 = this.sig_chain) != null ? _ref7.remote_proofs_to_track_obj() : void 0,
        ctime: unix_time()
      };
      return out;
    };

    User.prototype.remove_key = function(cb) {
      return (master_ring().make_key_from_user(this, false)).remove(cb);
    };

    User.prototype.make_quarantined_keyring = function(cb) {
      var a, b, cleanup, err, esc, fps, key, ret, tmp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ret = err = null;
      cleanup = function(cb) {
        var e2, ___iced_passed_deferral1, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral1 = iced.findDeferral(arguments);
        (function(_this) {
          return (function(__iced_k) {
            if ((err != null) && (ret != null)) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral1,
                  filename: "/home/max/src/keybase/node-client/src/user.iced"
                });
                ret.nuke(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return e2 = arguments[0];
                    };
                  })(),
                  lineno: 463
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(log.warn("Error deleting sequestered keyring: " + e2.message));
              });
            } else {
              return __iced_k();
            }
          });
        })(this)((function(_this) {
          return function() {
            return cb();
          };
        })(this));
      };
      cb = chain_err(cb, cleanup);
      esc = make_esc(cb, "make_sequestered_keyring");
      log.debug("+ make_sequestered_keyring for " + (this.username()));
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.make_quarantined_keyring"
          });
          QuarantinedKeyRing.make(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return tmp = arguments[0];
              };
            })(),
            lineno: 470
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          ret = tmp;
          key = ret.make_key_from_user(_this, false);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/node-client/src/user.iced",
              funcname: "User.make_quarantined_keyring"
            });
            key.save(esc(__iced_deferrals.defer({
              lineno: 473
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/user.iced",
                funcname: "User.make_quarantined_keyring"
              });
              ret.list_fingerprints(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return fps = arguments[0];
                  };
                })(),
                lineno: 474
              })));
              __iced_deferrals._fulfill();
            })(function() {
              err = fps.length === 0 ? new E.ImportError("Import failed: no fingerprint came out!") : fps.length > 1 ? new E.CorruptionError("Import failed: found >1 fingerprints!") : ((a = _this.fingerprint()) != null) && !fpeq(a, (b = fps[0])) ? new E.BadFingerprintError("Bad fingerprint: " + a + " != " + b + "; server lying?") : (ret.set_fingerprint(fps[0]), _this.key = key, null);
              log.debug("- make_sequestered_keyring -> " + err);
              return cb(err, ret);
            });
          });
        };
      })(this));
    };

    User.prototype.new_tmp_keyring = function(_arg, cb) {
      var err, err2, err3, k, k2, secret, tmp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      secret = _arg.secret;
      tmp = err = null;
      log.debug("+ new_tmp_keyring for " + (this.username()) + " (secret=" + secret + ")");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/user.iced",
            funcname: "User.new_tmp_keyring"
          });
          TmpKeyRing.make(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return tmp = arguments[1];
              };
            })(),
            lineno: 496
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (err == null) {
              k = master_ring().make_key_from_user(_this, secret);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/node-client/src/user.iced",
                  funcname: "User.new_tmp_keyring"
                });
                k.load(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err2 = arguments[0];
                    };
                  })(),
                  lineno: 499
                }));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (typeof err2 === "undefined" || err2 === null) {
                    k2 = k.copy_to_keyring(tmp);
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/home/max/src/keybase/node-client/src/user.iced",
                        funcname: "User.new_tmp_keyring"
                      });
                      k2.save(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return err2 = arguments[0];
                          };
                        })(),
                        lineno: 502
                      }));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(function() {
                  (function(__iced_k) {
                    if (typeof err2 !== "undefined" && err2 !== null) {
                      err = err2;
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/home/max/src/keybase/node-client/src/user.iced",
                          funcname: "User.new_tmp_keyring"
                        });
                        tmp.nuke(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return err3 = arguments[0];
                            };
                          })(),
                          lineno: 505
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        return __iced_k(tmp = null);
                      });
                    } else {
                      return __iced_k();
                    }
                  })(__iced_k);
                });
              });
            } else {
              return __iced_k();
            }
          })(function() {
            log.debug("- new_tmp_keyring -> " + err);
            return cb(err, tmp);
          });
        };
      })(this));
    };

    User.prototype.gen_untrack_obj = function() {
      var out, pkp;
      pkp = this.public_keys.primary;
      out = {
        basics: filter(this.basics, ["id_version", "last_id_change", "username"]),
        id: this.id,
        key: filter(pkp, ["kid", "key_fingerprint"])
      };
      return out;
    };

    return User;

  })();

}).call(this);
