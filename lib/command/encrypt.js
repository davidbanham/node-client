// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var Base, BufferInStream, Command, E, TrackSubSubCommand, User, add_option_dict, dict_union, ee, env, log, make_esc, master_ring,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('./base').Base;

  log = require('../log');

  add_option_dict = require('./argparse').add_option_dict;

  E = require('../err').E;

  TrackSubSubCommand = require('../tracksubsub').TrackSubSubCommand;

  BufferInStream = require('iced-spawn').BufferInStream;

  master_ring = require('../keyring').master_ring;

  make_esc = require('iced-error').make_esc;

  dict_union = require('../util').dict_union;

  User = require('../user').User;

  env = require('../env').env;

  ee = require('./encrypt_and_email');

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.OPTS = dict_union(ee.Command.OPTS, {
      b: {
        alias: 'binary',
        action: "storeTrue",
        help: "output in binary (rather than ASCII/armored)"
      },
      o: {
        alias: 'output',
        help: 'the output file to write the encryption to'
      },
      s: {
        alias: "sign",
        action: "storeTrue",
        help: "sign in addition to encrypting"
      }
    });

    Command.prototype.get_cmd_desc = function() {
      return {
        opts: {
          aliases: ["enc"],
          help: "encrypt a message and output to stdout or a file"
        },
        name: "encrypt"
      };
    };

    Command.prototype.output_file = function() {
      return this.argv.output;
    };

    Command.prototype.do_binary = function() {
      return this.argv.binary;
    };

    Command.prototype.do_sign = function() {
      return this.argv.sign;
    };

    Command.prototype.do_output = function(out, cb) {
      if ((out != null) && (this.argv.output == null)) {
        log.console.log(out.toString(this.argv.binary ? 'utf8' : 'binary'));
      }
      return cb(null);
    };

    return Command;

  })(ee.Command);

}).call(this);
