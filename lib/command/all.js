// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var ArgumentParser, Base, Config, E, Main, PackageJson, add_option_dict, db, env, gpgw, iced, init_env, keyring, log, make_esc, platform_info, proxyca, req, run, session, version_info, __iced_k, __iced_k_noop, _ref, _ref1;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  _ref = require('../env'), env = _ref.env, init_env = _ref.init_env;

  Config = require('../config').Config;

  req = require('../req');

  session = require('../session');

  db = require('../db');

  gpgw = require('gpg-wrapper');

  keyring = require('../keyring');

  _ref1 = require('../version'), platform_info = _ref1.platform_info, version_info = _ref1.version_info;

  proxyca = require('../proxyca');

  Main = (function() {
    function Main() {
      this.commands = {};
      this.pkjson = new PackageJson();
    }

    Main.prototype.arg_parse_init = function() {
      var err;
      err = null;
      this.ap = new ArgumentParser({
        addHelp: true,
        version: this.pkjson.version(),
        description: 'keybase.io command line client',
        prog: this.pkjson.bin()
      });
      if (!this.add_subcommands()) {
        err = new E.InitError("cannot initialize subcommands");
      }
      return err;
    };

    Main.prototype.add_subcommands = function() {
      var list, m, mod, n, names, obj, subparsers, _i, _j, _len, _len1;
      add_option_dict(this.ap, Base.OPTS);
      list = ["cert", "config", "decrypt", "email", "encrypt", "help", "id", "join", "keygen", "login", "logout", "pull", "push", "prove", "reset", "revoke", "sign", "status", "switch", "track", "untrack", "verify", "version"];
      subparsers = this.ap.addSubparsers({
        title: 'subcommands',
        dest: 'subcommand_name'
      });
      this.commands = {};
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        m = list[_i];
        mod = require("./" + m);
        obj = new mod.Command(this);
        names = obj.add_subcommand_parser(subparsers);
        for (_j = 0, _len1 = names.length; _j < _len1; _j++) {
          n = names[_j];
          this.commands[n] = obj;
        }
      }
      return true;
    };

    Main.prototype.parse_args = function(cb) {
      var err;
      this.cmd = null;
      err = this.arg_parse_init();
      if (err == null) {
        this.argv = this.ap.parseArgs(process.argv.slice(2));
        this.cmd = this.commands[this.argv.subcommand_name];
        if (this.cmd == null) {
          log.error("Subcommand not found: " + argv.subcommand_name);
          err = new E.ArgsError("" + argv.subcommand_name + " not found");
        } else {
          err = this.cmd.set_argv(this.argv);
        }
      }
      return cb(err);
    };

    Main.prototype.load_config = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.cmd.use_config()) {
            _this.config = new Config(env().get_config_filename(), _this.cmd.config_opts());
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                funcname: "Main.load_config"
              });
              _this.config.open(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 111
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Main.prototype.load_session = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.cmd.use_session()) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                funcname: "Main.load_session"
              });
              session.load(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 119
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Main.prototype.main = function() {
      var err, msg, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
            funcname: "Main.main"
          });
          _this.run(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 125
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            msg = err instanceof gpgw.E.GpgError ? "`gpg` exited with code " + err.rc : err.message;
            log.error(msg);
            if (err.stderr != null) {
              log.warn(err.stderr.toString('utf8'));
            }
          }
          return process.exit(typeof err !== "undefined" && err !== null ? -2 : 0);
        };
      })(this));
    };

    Main.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
            funcname: "Main.run"
          });
          _this.setup(esc(__iced_deferrals.defer({
            lineno: 137
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
              funcname: "Main.run"
            });
            _this.cmd.run(esc(__iced_deferrals.defer({
              lineno: 138
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Main.prototype.config_logger = function() {
      var p;
      p = log["package"]();
      if (this.argv.debug) {
        p.env().set_level(p.DEBUG);
      }
      if (this.argv.no_color) {
        p.env().set_use_color(false);
      }
      return gpgw.set_log(log.warn);
    };

    Main.prototype.init_keyring = function() {
      return keyring.init();
    };

    Main.prototype.load_db = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.cmd.use_db()) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                funcname: "Main.load_db"
              });
              db.open(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 161
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Main.prototype.cleanup_previous_crash = function(cb) {
      var err;
      err = null;
      return cb(err);
    };

    Main.prototype.startup_message = function(cb) {
      var err, info, p, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      p = log["package"]();
      log.debug("+ startup message");
      (function(_this) {
        return (function(__iced_k) {
          if (p.env().get_level() === p.DEBUG) {
            log.debug("| CLI version: " + ((new PackageJson).version()));
            log.debug("| Platform info: " + (JSON.stringify(platform_info())));
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                funcname: "Main.startup_message"
              });
              version_info(_this._gpg_version, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return info = arguments[1];
                  };
                })(),
                lineno: 178
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(typeof err !== "undefined" && err !== null ? log.error("Error fetching version info: " + err.message) : log.debug("| Version info: " + (JSON.stringify(info))));
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- startup message");
          return cb(null);
        };
      })(this));
    };

    Main.prototype.init_gpg = function(cb) {
      var c, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.cmd.use_gpg()) {
            c = env().get_gpg_cmd();
            log.debug("+ testing GPG command-line client " + (c != null ? c : '<default: gpg>'));
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                funcname: "Main.init_gpg"
              });
              keyring.master_ring().test(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    err = arguments[0];
                    return __slot_1._gpg_version = arguments[1];
                  };
                })(_this),
                lineno: 193
              }));
              __iced_deferrals._fulfill();
            })(function() {
              log.debug("- tested GPG command-line client -> " + err);
              return __iced_k(err != null ? err = new E.GpgError("Could not acces gpg cmd line client '" + c + "'") : c != null ? gpgw.set_gpg_cmd(c) : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Main.prototype.init_proxy_cas = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
            funcname: "Main.init_proxy_cas"
          });
          proxyca.init(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 204
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Main.prototype.setup = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "setup");
      init_env();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
            funcname: "Main.setup"
          });
          _this.parse_args(esc(__iced_deferrals.defer({
            lineno: 213
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          env().set_argv(_this.argv);
          _this.config_logger();
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
              funcname: "Main.setup"
            });
            _this.load_config(esc(__iced_deferrals.defer({
              lineno: 216
            })));
            __iced_deferrals._fulfill();
          })(function() {
            env().set_config(_this.config);
            _this.init_keyring();
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                funcname: "Main.setup"
              });
              _this.init_gpg(esc(__iced_deferrals.defer({
                lineno: 219
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                  funcname: "Main.setup"
                });
                _this.init_proxy_cas(esc(__iced_deferrals.defer({
                  lineno: 220
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                    funcname: "Main.setup"
                  });
                  _this.startup_message(esc(__iced_deferrals.defer({
                    lineno: 222
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                      funcname: "Main.setup"
                    });
                    _this.load_db(esc(__iced_deferrals.defer({
                      lineno: 223
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                        funcname: "Main.setup"
                      });
                      _this.cleanup_previous_crash(esc(__iced_deferrals.defer({
                        lineno: 224
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                          funcname: "Main.setup"
                        });
                        _this.load_session(esc(__iced_deferrals.defer({
                          lineno: 225
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase/node-client/src/command/all.iced",
                            funcname: "Main.setup"
                          });
                          _this.cmd.assertions(esc(__iced_deferrals.defer({
                            lineno: 226
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          env().set_session(_this.session);
                          return cb(null);
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    return Main;

  })();

  exports.run = run = function() {
    return (new Main).main();
  };

}).call(this);
