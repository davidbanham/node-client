// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var Base, BufferInStream, Command, E, TrackSubSubCommand, User, add_option_dict, dict_union, ee, env, iced, log, make_esc, master_ring, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  add_option_dict = require('./argparse').add_option_dict;

  E = require('../err').E;

  TrackSubSubCommand = require('../tracksubsub').TrackSubSubCommand;

  BufferInStream = require('iced-spawn').BufferInStream;

  master_ring = require('../keyring').master_ring;

  make_esc = require('iced-error').make_esc;

  dict_union = require('../util').dict_union;

  User = require('../user').User;

  env = require('../env').env;

  ee = require('./encrypt_and_email');

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.OPTS = dict_union(ee.Command.OPTS, {
      S: {
        alias: "no-sign",
        action: "storeTrue",
        help: "don't sign (sign by default)"
      },
      j: {
        alias: "subject",
        help: "provide a **CLEARTEXT** subject for the mail"
      }
    });

    Command.prototype.get_cmd_desc = function() {
      return {
        opts: {
          aliases: ["em"],
          help: "encrypt message and send an email (via keybase.io's server)"
        },
        name: "email"
      };
    };

    Command.prototype.do_sign = function() {
      return !this.argv.no_sign;
    };

    Command.prototype.subject = function() {
      var j;
      j = this.argv.subject;
      if (j == null) {
        j = "<An encrypted message via keybase.io>";
      }
      return j;
    };

    Command.prototype.do_output = function(out, cb) {
      var arg, body, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      arg = {
        endpoint: "email/proxy",
        args: {
          username: this.argv.them,
          body: out,
          subject: this.subject()
        }
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/command/email.iced",
            funcname: "Command.do_output"
          });
          req.post(arg, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 59
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.pre_check = function(cb) {
      var arg, body, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::pre_check");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/command/email.iced",
            funcname: "Command.pre_check"
          });
          session.load_and_login(esc(__iced_deferrals.defer({
            lineno: 66
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          arg = {
            endpoint: "email/check",
            args: {
              username: _this.argv.them,
              notify_on_fail: 1
            }
          };
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/command/email.iced",
              funcname: "Command.pre_check"
            });
            req.get(arg, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return body = arguments[0];
                };
              })(),
              lineno: 72
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    return Command;

  })(ee.Command);

}).call(this);
