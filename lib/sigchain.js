// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var BAD_X, CHECK, E, Link, SHA256, ST, SigChain, Warnings, asyncify, cheerio, colors, constants, date_to_unix, db, deq, dict_union, env, format_fingerprint, iced, log, make_email, make_esc, proofs, req, request, scrapemod, strip, util, __iced_k, __iced_k_noop, _ref, _ref1, _ref2;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  db = require('./db');

  req = require('./req');

  log = require('./log');

  constants = require('./constants').constants;

  SHA256 = require('./keyutils').SHA256;

  E = require('./err').E;

  _ref = require('pgp-utils').util, format_fingerprint = _ref.format_fingerprint, Warnings = _ref.Warnings, asyncify = _ref.asyncify;

  make_esc = require('iced-error').make_esc;

  ST = constants.signature_types;

  _ref1 = require('./util'), dict_union = _ref1.dict_union, date_to_unix = _ref1.date_to_unix, make_email = _ref1.make_email;

  proofs = require('keybase-proofs');

  cheerio = require('cheerio');

  request = require('request');

  colors = require('colors');

  deq = require('deep-equal');

  util = require('util');

  env = require('./env').env;

  scrapemod = require('./scrapers');

  _ref2 = require('./display'), CHECK = _ref2.CHECK, BAD_X = _ref2.BAD_X;

  strip = function(x) {
    return x.replace(/\s+/g, '');
  };

  exports.Link = Link = (function() {
    Link.ID_TYPE = constants.ids.sig_chain_link;

    function Link(_arg) {
      this.id = _arg.id, this.obj = _arg.obj;
      this.id || (this.id = this.obj.payload_hash);
      this._revoked = false;
    }

    Link.prototype.export_to_user = function() {
      return {
        seqno: this.seqno(),
        payload_hash: this.id,
        sig_id: this.sig_id()
      };
    };

    Link.prototype.prev = function() {
      return this.obj.prev;
    };

    Link.prototype.seqno = function() {
      return this.obj.seqno;
    };

    Link.prototype.sig = function() {
      return this.obj.sig;
    };

    Link.prototype.payload_json_str = function() {
      return this.obj.payload_json;
    };

    Link.prototype.fingerprint = function() {
      return this.obj.fingerprint.toLowerCase();
    };

    Link.prototype.short_key_id = function() {
      return this.fingerprint().slice(-8).toUpperCase();
    };

    Link.prototype.is_self_sig = function() {
      var _ref3;
      return (_ref3 = this.sig_type()) === ST.SELF_SIG || _ref3 === ST.REMOTE_PROOF || _ref3 === ST.TRACK;
    };

    Link.prototype.self_signer = function() {
      var _ref3, _ref4, _ref5;
      return (_ref3 = this.payload_json()) != null ? (_ref4 = _ref3.body) != null ? (_ref5 = _ref4.key) != null ? _ref5.username : void 0 : void 0 : void 0;
    };

    Link.prototype.proof_service_object = function() {
      var _ref3, _ref4;
      return (_ref3 = this.payload_json()) != null ? (_ref4 = _ref3.body) != null ? _ref4.service : void 0 : void 0;
    };

    Link.prototype.remote_username = function() {
      var _ref3;
      return (_ref3 = this.proof_service_object()) != null ? _ref3.username : void 0;
    };

    Link.prototype.sig_type = function() {
      return this.obj.sig_type;
    };

    Link.prototype.proof_type = function() {
      return this.obj.proof_type;
    };

    Link.prototype.proof_state = function() {
      return this.obj.proof_state;
    };

    Link.prototype.sig_id = function() {
      return this.obj.sig_id;
    };

    Link.prototype.api_url = function() {
      return this.obj.api_url;
    };

    Link.prototype.human_url = function() {
      return this.obj.human_url;
    };

    Link.prototype.proof_text_check = function() {
      return this.obj.proof_text_check;
    };

    Link.prototype.remote_id = function() {
      return this.obj.remote_id;
    };

    Link.prototype.body = function() {
      var _ref3;
      return (_ref3 = this.payload_json()) != null ? _ref3.body : void 0;
    };

    Link.prototype.ctime = function() {
      return date_to_unix(this.obj.ctime);
    };

    Link.prototype.revoke = function() {
      return this._revoked = true;
    };

    Link.prototype.is_revoked = function() {
      return this._revoked;
    };

    Link.prototype.get_sub_id = function() {
      var _ref3;
      return (_ref3 = scrapemod.alloc_stub(this.proof_type())) != null ? _ref3.get_sub_id(this.proof_service_object()) : void 0;
    };

    Link.prototype.to_list_display = function() {
      var _ref3;
      return (_ref3 = scrapemod.alloc_stub(this.proof_type())) != null ? _ref3.to_list_display(this.proof_service_object()) : void 0;
    };

    Link.prototype.to_table_obj = function() {
      var ret;
      ret = this.body().track;
      ret.ctime = this.ctime();
      return ret;
    };

    Link.prototype.to_track_obj = function() {
      return {
        seqno: this.seqno(),
        sig_id: this.sig_id(),
        payload_hash: this.id
      };
    };

    Link.prototype.payload_json = function() {
      var e, ret, s;
      if (this._payload_obj == null) {
        s = this.payload_json_str();
        ret = {};
        try {
          ret = JSON.parse(s);
        } catch (_error) {
          e = _error;
          log.error("Error parsing JSON " + s + ": " + e.message);
        }
        this._payload_obj = ret;
      }
      return this._payload_obj;
    };

    Link.prototype.verify = function() {
      var a, b, err, j;
      err = null;
      if ((a = this.obj.payload_hash) !== (b = this.id)) {
        err = new E.CorruptionError("Link ID mismatch: " + a + " != " + b);
      } else if ((j = SHA256(this.payload_json_str()).toString('hex')) !== this.id) {
        err = new E.CorruptionError("Link has wrong id: " + this.id + " != " + this.j);
      }
      return err;
    };

    Link.prototype.store = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref3;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (((_ref3 = this.obj.prev) != null ? _ref3.length : void 0) === 0) {
        this.obj.prev = null;
      }
      log.debug("| putting link: " + this.id);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
            funcname: "Link.store"
          });
          db.put({
            type: Link.ID_TYPE,
            key: _this.id,
            value: _this.obj
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 124
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Link.prototype.refresh = function(cb) {
      var arg, body, err, row, u, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ refresh link");
      (function(_this) {
        return (function(__iced_k) {
          if ((_this.sig_type() === ST.REMOTE_PROOF) && (_this.api_url() == null)) {
            log.debug("| Proof_id = " + _this.obj.proof_id);
            arg = {
              endpoint: "sig/remote_proof",
              args: {
                proof_id: _this.obj.proof_id
              }
            };
            log.debug("| request proof refresh for id=" + _this.obj.proof_id);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "Link.refresh"
              });
              req.get(arg, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return body = arguments[1];
                  };
                })(),
                lineno: 138
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if ((typeof err === "undefined" || err === null) && ((row = typeof body !== "undefined" && body !== null ? body.row : void 0) != null) && ((u = row.api_url) != null)) {
                  log.debug("| Refreshed with api_url -> " + u);
                  _this.obj.api_url = u;
                  _this.obj.human_url = row.human_url;
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                      funcname: "Link.refresh"
                    });
                    _this.store(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return err = arguments[0];
                        };
                      })(),
                      lineno: 143
                    }));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(__iced_k);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- refresh_link");
          return cb(err);
        };
      })(this));
    };

    Link.load = function(id, cb) {
      var err, obj, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ret = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
            funcname: "Link.load"
          });
          db.get({
            type: Link.ID_TYPE,
            key: id
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return obj = arguments[1];
              };
            })(),
            lineno: 151
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {

          } else if (typeof obj !== "undefined" && obj !== null) {
            ret = new Link({
              id: id,
              obj: obj
            });
            if ((err = ret.verify()) != null) {
              ret = null;
            }
          }
          return cb(err, ret);
        };
      })(this));
    };

    Link.prototype.verify_sig = function(_arg, cb) {
      var pubkey, which;
      which = _arg.which, pubkey = _arg.pubkey;
      return pubkey.verify_sig({
        which: which,
        sig: this.sig(),
        payload: this.payload_json_str()
      }, cb);
    };

    Link.prototype.check_remote_proof = function(_arg, cb) {
      var arg, assert, assertions, e2, err, esc, msg, ok, pubkey, rc, rsc, scraper, skip, type, type_s, username, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      skip = _arg.skip, pubkey = _arg.pubkey, type = _arg.type, warnings = _arg.warnings, assertions = _arg.assertions;
      username = pubkey.username();
      esc = make_esc(cb, "SigChain::Link::check_remote_proof'");
      (function(_this) {
        return (function(__iced_k) {
          if ((type_s = proofs.proof_type_to_string[type]) == null) {
            err = new E.VerifyError("No remote proof type for " + type);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "Link.check_remote_proof"
              });
              athrow(err, esc(__iced_deferrals.defer({
                lineno: 173
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("+ " + username + ": checking remote " + type_s + " proof");
          assert = assertions != null ? assertions.found(type_s) : void 0;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
              funcname: "Link.check_remote_proof"
            });
            _this.verify_sig({
              which: "" + username + "@" + type_s,
              pubkey: pubkey
            }, esc(__iced_deferrals.defer({
              lineno: 179
            })));
            __iced_deferrals._fulfill();
          })(function() {
            if (assert != null) {
              assert.set_proof_service_object(_this.proof_service_object());
            }
            (function(__iced_k) {
              if (!skip && !_this.api_url()) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                    funcname: "Link.check_remote_proof"
                  });
                  _this.refresh(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return e2 = arguments[0];
                      };
                    })(),
                    lineno: 186
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k(typeof e2 !== "undefined" && e2 !== null ? log.warn("Error fetching URL for proof: " + e2.message) : void 0);
                });
              } else {
                return __iced_k();
              }
            })(function() {
              rsc = JSON.stringify(_this.proof_service_object());
              log.debug("| remote service desc is " + rsc);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                  funcname: "Link.check_remote_proof"
                });
                scrapemod.alloc(type, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return scraper = arguments[0];
                    };
                  })(),
                  lineno: 193
                })));
                __iced_deferrals._fulfill();
              })(function() {
                arg = {
                  api_url: _this.api_url(),
                  signature: _this.sig(),
                  proof_text_check: _this.proof_text_check(),
                  remote_id: "" + _this.remote_id(),
                  human_url: _this.human_url()
                };
                arg = dict_union(arg, _this.proof_service_object());
                (function(__iced_k) {
                  if (skip) {
                    return __iced_k(rc = proofs.constants.v_codes.OK);
                  } else {
                    (function(__iced_k) {
                      if (!_this.api_url()) {
                        return __iced_k(rc = proofs.constants.v_codes.NOT_FOUND);
                      } else {
                        log.debug("+ Calling into scraper -> " + rsc + "@" + type_s + " -> " + (_this.api_url()));
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                            funcname: "Link.check_remote_proof"
                          });
                          scraper.validate(arg, esc(__iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return rc = arguments[0];
                              };
                            })(),
                            lineno: 208
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          return __iced_k(log.debug("- Called scraper -> " + rc));
                        });
                      }
                    })(__iced_k);
                  }
                })(function() {
                  ok = false;
                  if (rc !== proofs.constants.v_codes.OK) {
                    warnings.push(new E.RemoteCheckError("Remote check failed (code: " + rc + ")"));
                    _this.obj.proof_state = rc;
                  } else {
                    ok = true;
                    log.debug("| proof checked out");
                  }
                  msg = scraper.format_msg({
                    arg: arg,
                    ok: ok
                  });
                  if (skip) {
                    msg.push("(you've recently OK'ed these proofs)");
                  }
                  if (!ok) {
                    msg.push("(failed with code " + rc + ")");
                  }
                  log.console.error(msg.join(' '));
                  log.debug("- " + username + ": checked remote " + type_s + " proof");
                  if (assert != null) {
                    assert.success(_this.human_url());
                  }
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    Link.prototype.remote_proof_to_track_obj = function() {
      var _ref3, _ref4;
      return {
        ctime: this.obj.ctime,
        etime: this.obj.etime,
        seqno: this.obj.seqno,
        curr: this.id,
        sig_type: this.obj.sig_type,
        sig_id: this.obj.sig_id,
        remote_key_proof: {
          check_data_json: (_ref3 = this.payload_json()) != null ? (_ref4 = _ref3.body) != null ? _ref4.service : void 0 : void 0,
          state: this.obj.proof_state,
          proof_type: this.obj.proof_type
        }
      };
    };

    return Link;

  })();

  exports.SigChain = SigChain = (function() {
    function SigChain(uid, _links) {
      this.uid = uid;
      this._links = _links != null ? _links : [];
      this._lookup = {};
      this._index_links(this._links);
      this._true_last = null;
    }

    SigChain.prototype._index_links = function(list) {
      var l, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        l = list[_i];
        _results.push(this._lookup[l.id] = l);
      }
      return _results;
    };

    SigChain.prototype.lookup = function(id) {
      return this._lookup[id];
    };

    SigChain.load = function(uid, curr, cb) {
      var err, link, links, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ " + uid + ": load signature chain");
      links = [];
      err = null;
      ret = null;
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(curr && (err == null))) {
              return _break();
            } else {
              log.debug("| " + uid + ": Loading link " + curr);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                  funcname: "SigChain.load"
                });
                Link.load(curr, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return link = arguments[1];
                    };
                  })(),
                  lineno: 272
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(err != null ? (log.error("Couldn't find link: " + last), log.debug("| -> error")) : typeof link !== "undefined" && link !== null ? (links.push(link), curr = link.prev(), log.debug("| -> found link and previous; prev=" + curr)) : (log.debug("| -> reached the chain end"), curr = null));
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          if (err == null) {
            ret = new SigChain(uid, links.reverse());
            if ((err = ret.check_chain(true)) != null) {
              ret = null;
            }
          }
          log.debug("- " + uid + ": loaded signature chain");
          return cb(err, ret);
        };
      })(this));
    };

    SigChain.prototype.last_seqno = function() {
      var l;
      if ((l = this.last()) != null) {
        return l.seqno();
      } else {
        return null;
      }
    };

    SigChain.prototype.check_chain = function(first, links) {
      var i, link, prev, _i, _len;
      links || (links = this._links);
      prev = null;
      i = 0;
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        if (((prev != null) && (prev !== link.prev())) || ((prev == null) && first && link.prev())) {
          return new E.CorruptionError("Bad chain link in " + (link.seqno()) + ": " + prev + " != " + (link.prev()));
        }
        prev = link.id;
      }
      return null;
    };

    SigChain.prototype._update = function(cb) {
      var args, body, did_update, esc, link, new_links, obj, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ sigchain::_update");
      esc = make_esc(cb, "_update");
      args = {
        uid: this.uid,
        low: this.last_seqno() + 1
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
            funcname: "SigChain._update"
          });
          req.get({
            endpoint: "sig/get",
            args: args
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return body = arguments[0];
              };
            })(),
            lineno: 311
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("| found " + body.sigs.length + " new signatures");
          new_links = [];
          did_update = false;
          (function(__iced_k) {
            var _i, _len, _ref3, _results, _while;
            _ref3 = body.sigs;
            _len = _ref3.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                obj = _ref3[_i];
                link = new Link({
                  obj: obj
                });
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                    funcname: "SigChain._update"
                  });
                  asyncify(link.verify(), esc(__iced_deferrals.defer({
                    lineno: 317
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  new_links.push(link);
                  return _next(did_update = true);
                });
              }
            };
            _while(__iced_k);
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "SigChain._update"
              });
              asyncify(_this.check_chain(_this._links.length === 0, new_links), esc(__iced_deferrals.defer({
                lineno: 320
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                  funcname: "SigChain._update"
                });
                asyncify(_this.check_chain(false, _this._links.slice(-1).concat(new_links.slice(0, 1))), esc(__iced_deferrals.defer({
                  lineno: 321
                })));
                __iced_deferrals._fulfill();
              })(function() {
                _this._links = _this._links.concat(new_links);
                _this._new_links = new_links;
                _this._index_links(new_links);
                log.debug("- sigchain::_update");
                return cb(null, did_update);
              });
            });
          });
        };
      })(this));
    };

    SigChain.prototype.store = function(cb) {
      var err, link, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          var _ref3;
          if ((_ref3 = _this._new_links) != null ? _ref3.length : void 0) {
            log.debug("+ writing dirty signature chain");
            (function(__iced_k) {
              var _i, _len, _ref4, _results, _while;
              _ref4 = _this._new_links;
              _len = _ref4.length;
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _len)) {
                  return _break();
                } else {
                  link = _ref4[_i];
                  if (err == null) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                        funcname: "SigChain.store"
                      });
                      link.store(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return err = arguments[0];
                          };
                        })(),
                        lineno: 335
                      }));
                      __iced_deferrals._fulfill();
                    })(_next);
                  } else {
                    return _continue();
                  }
                }
              };
              _while(__iced_k);
            })(function() {
              return __iced_k(log.debug("- wrote signature chain"));
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    SigChain.prototype.update = function(remote_seqno, cb) {
      var a, b, did_update, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      did_update = false;
      (function(_this) {
        return (function(__iced_k) {
          if (((a = remote_seqno) == null) || a > (b = _this.last_seqno())) {
            log.debug("| sigchain update: " + a + " vs. " + b);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "SigChain.update"
              });
              _this._update(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return did_update = arguments[1];
                  };
                })(),
                lineno: 346
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k((remote_seqno != null) && ((a = remote_seqno) !== (b = _this.last_seqno())) ? err = new E.CorruptionError("failed to appropriately update chain: " + a + " != " + b) : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, did_update);
        };
      })(this));
    };

    SigChain.prototype.last = function() {
      var _ref3;
      if ((_ref3 = this._links) != null ? _ref3.length : void 0) {
        return this._links.slice(-1)[0];
      } else {
        return null;
      }
    };

    SigChain.prototype.true_last = function() {
      return this._true_last;
    };

    SigChain.prototype.is_track_fresh = function(id) {
      var l, _i, _ref3, _ref4;
      _ref3 = this._links;
      for (_i = _ref3.length - 1; _i >= 0; _i += -1) {
        l = _ref3[_i];
        if (l.id === id) {
          return true;
        } else if (!((_ref4 = l.sig_type()) === ST.TRACK || _ref4 === ST.UNTRACK)) {
          return false;
        }
      }
      return false;
    };

    SigChain.prototype._limit = function() {
      var c, i, l, n, _i, _ref3, _ref4;
      c = [];
      log.debug("| input chain with " + (n = this._links.length) + " link" + (n !== 1 ? 's' : ''));
      for (i = _i = _ref3 = this._links.length - 1; _ref3 <= 0 ? _i <= 0 : _i >= 0; i = _ref3 <= 0 ? ++_i : --_i) {
        if (((_ref4 = (l = this._links[i]).fingerprint()) != null ? _ref4.toLowerCase() : void 0) === this.fingerprint) {
          c.push(l);
        } else {
          break;
        }
      }
      c = c.reverse();
      if (c.length !== this._links.length) {
        log.debug("| Limited to " + (n = c.length) + " link" + (n !== 1 ? 's' : ''));
      }
      return this._links = c;
    };

    SigChain.prototype._verify_sig = function(cb) {
      var err, l, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if ((l = _this.last()) != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "SigChain._verify_sig"
              });
              l.verify_sig({
                which: _this.username,
                pubkey: _this.pubkey
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 393
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    SigChain.prototype._verify_userid = function(cb) {
      var d, email, err, esc, found, k, link, msg, type, uids, v, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_verify_userid");
      log.debug("+ _verify_userid for " + this.username);
      found = false;
      log.debug("| read username baked into key");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
            funcname: "SigChain._verify_userid"
          });
          _this.pubkey.read_uids_from_key(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return uids = arguments[0];
              };
            })(),
            lineno: 406
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _i, _j, _len, _len1, _ref3, _ref4, _ref5;
          found = ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = uids.length; _i < _len; _i++) {
              email = uids[_i].email;
              _results.push(email);
            }
            return _results;
          })()).indexOf(make_email(_this.username)) >= 0;
          log.debug("| search for explicit self-signatures");
          if (!found && ((v = (_ref3 = _this.table) != null ? _ref3[ST.SELF_SIG] : void 0) != null)) {
            for (_i = 0, _len = v.length; _i < _len; _i++) {
              link = v[_i];
              if (link.self_signer() === _this.username) {
                found = true;
                break;
              }
            }
          }
          log.debug("| search for a free-rider on a track signature");
          if (!found) {
            _ref4 = [ST.REMOTE_PROOF, ST.TRACK];
            for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
              type = _ref4[_j];
              if ((d = (_ref5 = _this.table) != null ? _ref5[type] : void 0)) {
                for (k in d) {
                  link = d[k];
                  if (link.self_signer() === _this.username) {
                    found = true;
                    break;
                  }
                }
                if (found) {
                  break;
                }
              }
            }
          }
          if ((typeof err === "undefined" || err === null) && !found) {
            msg = _this.username === env().get_username() ? "You haven't signed your own key! Try `keybase revoke` and then `keybase push`" : "user '" + _this.username + "' hasn't signed their own key";
            err = new E.VerifyError(msg);
          }
          log.debug("- _verify_userid for " + _this.username + " -> " + err);
          return cb(err);
        };
      })(this));
    };

    SigChain.prototype._compress = function() {
      var INSERT, MAKE, S, body, id, index, keys, link, lt, out, pjs, prune, sig_id, sub_id, _i, _len, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      log.debug("+ compressing signature chain");
      MAKE = function(d, k, def) {
        var out;
        if ((out = d[k])) {
          return out;
        } else {
          return d[k] = out = def;
        }
      };
      INSERT = function(d, keys, val) {
        var k, _i, _len, _ref3;
        _ref3 = keys.slice(0, -1);
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          k = _ref3[_i];
          d = MAKE(d, k, {});
        }
        return d[keys.slice(-1)[0]] = val;
      };
      out = {};
      index = {};
      _ref3 = this._links;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        link = _ref3[_i];
        if (!(link.fingerprint() === this.fingerprint)) {
          continue;
        }
        lt = link.sig_type();
        sig_id = link.sig_id();
        pjs = link.payload_json_str();
        body = (_ref4 = link.payload_json()) != null ? _ref4.body : void 0;
        index[link.sig_id()] = link;
        switch (lt) {
          case ST.SELF_SIG:
            MAKE(out, lt, []).push(link);
            break;
          case ST.REMOTE_PROOF:
            S = constants.proof_state;
            if ((_ref5 = link.proof_state()) === S.OK || _ref5 === S.TEMP_FAILURE || _ref5 === S.LOOKING) {
              keys = [lt, link.proof_type()];
              if ((sub_id = link.get_sub_id()) != null) {
                keys.push(sub_id);
              }
              INSERT(out, keys, link);
            }
            break;
          case ST.TRACK:
            if ((id = body != null ? (_ref6 = body.track) != null ? _ref6.id : void 0 : void 0) == null) {
              log.warn("Missing track in signature");
              log.debug("Full JSON in signature:");
              log.debug(pjs);
            } else {
              MAKE(out, lt, {})[id] = link;
            }
            break;
          case ST.REVOKE:
            if (!(sig_id = body != null ? (_ref7 = body.revoke) != null ? _ref7.sig_id : void 0 : void 0)) {
              log.warn("Cannot find revoke sig_id in signature: " + pjs);
            } else if ((link = index[sig_id]) == null) {
              log.warn("Cannot revoke signature " + sig_id + " since we haven't seen it");
            } else if (link.is_revoked()) {
              log.info("Signature is already revoked: " + sig_id);
            } else {
              link.revoke();
            }
            break;
          case ST.UNTRACK:
            if ((id = body != null ? (_ref8 = body.untrack) != null ? _ref8.id : void 0 : void 0) == null) {
              log.warn("Mssing untrack in signature: " + pjs);
            } else if ((link = (_ref9 = out[ST.TRACK]) != null ? _ref9[id] : void 0) == null) {
              log.warn("Unexpected untrack of " + id + " in signature chain");
            } else if (link.is_revoked()) {
              log.debug("| Tracking was already revoked for " + id + " (ignoring untrack)");
            } else {
              link.revoke();
            }
            break;
          default:
            log.warn("unknown public sig type: " + lt);
        }
      }
      prune = function(d) {
        var k, v, _results;
        _results = [];
        for (k in d) {
          v = d[k];
          if (!(v instanceof Link)) {
            _results.push(prune(v));
          } else if (v.is_revoked()) {
            _results.push(delete d[k]);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      prune(out);
      log.debug("- signature chain compressed");
      return this.table = out;
    };

    SigChain.prototype.remote_proofs_to_track_obj = function() {
      var d, key, link, _ref3, _results;
      if ((d = (_ref3 = this.table) != null ? _ref3[ST.REMOTE_PROOF] : void 0) != null) {
        _results = [];
        for (key in d) {
          link = d[key];
          if (!link.is_revoked()) {
            _results.push(link.remote_proof_to_track_obj());
          }
        }
        return _results;
      } else {
        return [];
      }
    };

    SigChain.prototype.get_track_obj = function(uid) {
      var _ref3, _ref4, _ref5;
      return (_ref3 = this.table) != null ? (_ref4 = _ref3[ST.TRACK]) != null ? (_ref5 = _ref4[uid]) != null ? _ref5.to_table_obj() : void 0 : void 0 : void 0;
    };

    SigChain.prototype.verify_sig = function(_arg, cb) {
      var esc, key, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      key = _arg.key;
      esc = make_esc(cb, "SigChain::verify_sig");
      this.username = username = key.username();
      this.pubkey = key;
      log.debug("+ " + username + ": verifying sig");
      (function(_this) {
        return (function(__iced_k) {
          var _ref3, _ref4;
          if (((_this.fingerprint = (_ref3 = key.fingerprint()) != null ? _ref3.toLowerCase() : void 0) != null) && (((_ref4 = _this.last()) != null ? _ref4.fingerprint() : void 0) != null)) {
            _this._true_last = _this.last();
            _this._limit();
            _this._compress();
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "SigChain.verify_sig"
              });
              _this._verify_sig(esc(__iced_deferrals.defer({
                lineno: 529
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k(log.debug("| Skipped since no fingerprint found in key or no links in chain"));
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
              funcname: "SigChain.verify_sig"
            });
            _this._verify_userid(esc(__iced_deferrals.defer({
              lineno: 532
            })));
            __iced_deferrals._fulfill();
          })(function() {
            log.debug("- " + username + ": verified sig");
            return cb(null);
          });
        };
      })(this));
    };

    SigChain.prototype.list_remote_proofs = function() {
      var k, obj, out, tab, type, v;
      out = null;
      if ((this.table != null) && ((tab = this.table[ST.REMOTE_PROOF]) != null)) {
        for (type in tab) {
          obj = tab[type];
          type = proofs.proof_type_to_string[parseInt(type)];
          out || (out = {});
          out[type] = obj instanceof Link ? obj.to_list_display() : (function() {
            var _results;
            _results = [];
            for (k in obj) {
              v = obj[k];
              _results.push(k.toLowerCase());
            }
            return _results;
          })();
        }
      }
      return out;
    };

    SigChain.prototype.check_remote_proofs = function(_arg, cb) {
      var assertions, esc, k, link, links, msg, n, pubkey, skip, tab, type, v, v2, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      skip = _arg.skip, pubkey = _arg.pubkey, assertions = _arg.assertions;
      esc = make_esc(cb, "SigChain::check_remote_proofs");
      log.debug("+ " + (pubkey.username()) + ": checking remote proofs (skip=" + skip + ")");
      warnings = new Warnings();
      msg = CHECK + " " + colors.green("public key fingerprint: " + (format_fingerprint(pubkey.fingerprint())));
      log.console.error(msg);
      n = 0;
      (function(_this) {
        return (function(__iced_k) {
          var _ref3;
          if ((tab = (_ref3 = _this.table) != null ? _ref3[ST.REMOTE_PROOF] : void 0) != null) {
            log.debug("| Loaded table with " + (Object.keys(tab).length) + " keys");
            (function(__iced_k) {
              var _i, _k, _keys, _ref4, _results, _while;
              _ref4 = tab;
              _keys = (function() {
                var _results1;
                _results1 = [];
                for (_k in _ref4) {
                  _results1.push(_k);
                }
                return _results1;
              })();
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _keys.length)) {
                  return _break();
                } else {
                  type = _keys[_i];
                  v = _ref4[type];
                  type = parseInt(type);
                  links = v instanceof Link ? [v] : (function() {
                    var _results1;
                    _results1 = [];
                    for (k in v) {
                      v2 = v[k];
                      _results1.push(v2);
                    }
                    return _results1;
                  })();
                  (function(__iced_k) {
                    var _j, _len, _ref5, _results1, _while;
                    _ref5 = links;
                    _len = _ref5.length;
                    _j = 0;
                    _results1 = [];
                    _while = function(__iced_k) {
                      var _break, _continue, _next;
                      _break = function() {
                        return __iced_k(_results1);
                      };
                      _continue = function() {
                        return iced.trampoline(function() {
                          ++_j;
                          return _while(__iced_k);
                        });
                      };
                      _next = function(__iced_next_arg) {
                        _results1.push(__iced_next_arg);
                        return _continue();
                      };
                      if (!(_j < _len)) {
                        return _break();
                      } else {
                        link = _ref5[_j];
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/home/max/src/keybase/node-client/src/sigchain.iced",
                            funcname: "SigChain.check_remote_proofs"
                          });
                          link.check_remote_proof({
                            skip: skip,
                            pubkey: pubkey,
                            type: type,
                            warnings: warnings,
                            assertions: assertions
                          }, esc(__iced_deferrals.defer({
                            lineno: 575
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          return _next(n++);
                        });
                      }
                    };
                    _while(__iced_k);
                  })(_next);
                }
              };
              _while(__iced_k);
            })(__iced_k);
          } else {
            return __iced_k(log.debug("| No remote proofs found"));
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- " + (pubkey.username()) + ": checked remote proofs");
          return cb(null, warnings, n);
        };
      })(this));
    };

    return SigChain;

  })();

}).call(this);
