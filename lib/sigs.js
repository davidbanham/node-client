// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var BaseSigGen, GenericWebSiteProofGen, GithubProofGen, KeybaseProofGen, KeybasePushProofGen, SignatureEngine, SocialNetworkProofGen, TrackerProofGen, TwitterProofGen, UntrackerProofGen, colors, constants, decode, env, iced, log, make_esc, master_ring, proofs, req, session, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  proofs = require('keybase-proofs');

  make_esc = require('iced-error').make_esc;

  req = require('./req');

  constants = require('./constants').constants;

  session = require('./session');

  env = require('./env').env;

  log = require('./log');

  master_ring = require('./keyring').master_ring;

  decode = require('pgp-utils').armor.decode;

  colors = require('colors');

  BaseSigGen = (function() {
    function BaseSigGen(_arg) {
      this.km = _arg.km;
    }

    BaseSigGen.prototype._get_seqno_type = function() {
      return "PUBLIC";
    };

    BaseSigGen.prototype._get_announce_number = function(cb) {
      var body, err, type, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      type = this._get_seqno_type();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/sigs.iced",
            funcname: "BaseSigGen._get_announce_number"
          });
          req.get({
            endpoint: "sig/next_seqno",
            args: {
              type: type
            }
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 25
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            _this.seqno = body.seqno;
            _this.prev = body.prev;
          }
          return cb(err);
        };
      })(this));
    };

    BaseSigGen.prototype._get_binding_eng = function() {
      return this._make_binding_eng({
        sig_eng: new SignatureEngine({
          km: this.km
        }),
        seqno: this.seqno,
        prev: this.prev,
        host: constants.canonical_host,
        user: {
          local: {
            uid: session.get_uid(),
            username: env().get_username()
          }
        }
      });
    };

    BaseSigGen.prototype._do_signature = function(cb) {
      var eng, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      eng = this._get_binding_eng();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/sigs.iced",
            funcname: "BaseSigGen._do_signature"
          });
          eng.generate(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.sig = arguments[1];
              };
            })(_this),
            lineno: 49
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    BaseSigGen.prototype._v_modify_store_arg = function(arg) {};

    BaseSigGen.prototype._get_api_endpoint = function() {
      return "sig/post";
    };

    BaseSigGen.prototype._store_signature = function(cb) {
      var args, body, endpoint, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = {
        sig: this.sig.pgp,
        sig_id_base: this.sig.id,
        sig_id_short: this.sig.short_id,
        is_remote_proof: true
      };
      this._v_modify_store_arg(args);
      endpoint = this._get_api_endpoint();
      log.debug("+ storing signature:");
      log.debug("| writing to " + endpoint);
      log.debug("| with args " + (JSON.stringify(args)));
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/sigs.iced",
            funcname: "BaseSigGen._store_signature"
          });
          req.post({
            endpoint: endpoint,
            args: args
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 70
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            _this.proof_text = body.proof_text, _this.proof_id = body.proof_id, _this.sig_id = body.sig_id;
            log.debug("| reply with value: " + (JSON.stringify(body)));
          }
          log.debug("- stored signature (err = " + (typeof err !== "undefined" && err !== null ? err.message : void 0) + ")");
          return cb(err);
        };
      })(this));
    };

    BaseSigGen.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "BaseSigGen::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/sigs.iced",
            funcname: "BaseSigGen.run"
          });
          _this._get_announce_number(esc(__iced_deferrals.defer({
            lineno: 81
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/node-client/src/sigs.iced",
              funcname: "BaseSigGen.run"
            });
            _this._do_signature(esc(__iced_deferrals.defer({
              lineno: 82
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/sigs.iced",
                funcname: "BaseSigGen.run"
              });
              _this._store_signature(esc(__iced_deferrals.defer({
                lineno: 83
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null, _this.sig);
            });
          });
        };
      })(this));
    };

    BaseSigGen.prototype.normalize_name = function(n) {
      var klass;
      klass = this._binding_klass();
      return klass.normalize_name(n);
    };

    return BaseSigGen;

  })();

  exports.KeybaseProofGen = KeybaseProofGen = (function(_super) {
    __extends(KeybaseProofGen, _super);

    function KeybaseProofGen() {
      return KeybaseProofGen.__super__.constructor.apply(this, arguments);
    }

    KeybaseProofGen.prototype._v_modify_store_arg = function(arg) {
      arg.type = "web_service_binding.keybase";
      return arg.is_remote_proof = false;
    };

    KeybaseProofGen.prototype._make_binding_eng = function(arg) {
      return new proofs.KeybaseBinding(arg);
    };

    return KeybaseProofGen;

  })(BaseSigGen);

  exports.KeybasePushProofGen = KeybasePushProofGen = (function(_super) {
    __extends(KeybasePushProofGen, _super);

    function KeybasePushProofGen() {
      return KeybasePushProofGen.__super__.constructor.apply(this, arguments);
    }

    KeybasePushProofGen.prototype._store_signature = function(cb) {
      return cb(null);
    };

    KeybasePushProofGen.prototype._make_binding_eng = function(arg) {
      return new proofs.KeybaseBinding(arg);
    };

    return KeybasePushProofGen;

  })(BaseSigGen);

  exports.TrackerProofGen = TrackerProofGen = (function(_super) {
    __extends(TrackerProofGen, _super);

    function TrackerProofGen(_arg) {
      var km;
      km = _arg.km, this.prev = _arg.prev, this.seqno = _arg.seqno, this.uid = _arg.uid, this.track = _arg.track;
      TrackerProofGen.__super__.constructor.call(this, {
        km: km
      });
    }

    TrackerProofGen.prototype._get_announce_number = function(cb) {
      return cb(null);
    };

    TrackerProofGen.prototype._make_binding_eng = function(arg) {
      arg.track = this.track;
      return new proofs.Track(arg);
    };

    TrackerProofGen.prototype._v_modify_store_arg = function(arg) {
      arg.uid = this.uid;
      return arg.type = "track";
    };

    TrackerProofGen.prototype._get_api_endpoint = function() {
      return "follow";
    };

    return TrackerProofGen;

  })(BaseSigGen);

  exports.UntrackerProofGen = UntrackerProofGen = (function(_super) {
    __extends(UntrackerProofGen, _super);

    function UntrackerProofGen(_arg) {
      var km;
      km = _arg.km, this.uid = _arg.uid, this.untrack = _arg.untrack, this.seqno = _arg.seqno, this.prev = _arg.prev;
      UntrackerProofGen.__super__.constructor.call(this, {
        km: km
      });
    }

    UntrackerProofGen.prototype._get_announce_number = function(cb) {
      return cb(null);
    };

    UntrackerProofGen.prototype._make_binding_eng = function(arg) {
      arg.untrack = this.untrack;
      return new proofs.Untrack(arg);
    };

    UntrackerProofGen.prototype._v_modify_store_arg = function(arg) {
      arg.uid = this.uid;
      return arg.type = "untrack";
    };

    UntrackerProofGen.prototype._get_api_endpoint = function() {
      return "follow";
    };

    return UntrackerProofGen;

  })(BaseSigGen);

  SocialNetworkProofGen = (function(_super) {
    __extends(SocialNetworkProofGen, _super);

    function SocialNetworkProofGen(args) {
      this.remote_username = args.remote_name_normalized;
      SocialNetworkProofGen.__super__.constructor.call(this, args);
    }

    SocialNetworkProofGen.prototype._make_binding_eng = function(args) {
      var klass;
      args.user.remote = this.remote_username;
      klass = this._binding_klass();
      return new klass(args);
    };

    SocialNetworkProofGen.prototype._v_modify_store_arg = function(arg) {
      arg.remote_username = this.remote_username;
      return arg.type = "web_service_binding." + this._remote_service_name();
    };

    SocialNetworkProofGen.prototype.single_occupancy = function() {
      return true;
    };

    SocialNetworkProofGen.prototype.prompter = function() {
      var klass;
      klass = this._binding_klass();
      return {
        prompt: "Your username on " + (this.display_name()) + "? ",
        checker: function() {
          return klass.check_name;
        },
        hint: function() {
          return klass.name_hint();
        }
      };
    };

    return SocialNetworkProofGen;

  })(BaseSigGen);

  exports.GenericWebSiteProofGen = GenericWebSiteProofGen = (function(_super) {
    __extends(GenericWebSiteProofGen, _super);

    GenericWebSiteProofGen.prototype._binding_klass = function() {
      return proofs.GenericWebSiteBinding;
    };

    function GenericWebSiteProofGen(args) {
      this.remote_host = args.remote_name_normalized;
      GenericWebSiteProofGen.__super__.constructor.call(this, args);
    }

    GenericWebSiteProofGen.prototype._make_binding_eng = function(args) {
      var klass;
      args.remote_host = this.remote_host;
      klass = this._binding_klass();
      return new klass(args);
    };

    GenericWebSiteProofGen.prototype._v_modify_store_arg = function(arg) {
      arg.remote_host = this.remote_host;
      return arg.type = "web_service_binding.generic";
    };

    GenericWebSiteProofGen.prototype.instructions = function() {
      var file;
      file = proofs.GenericWebSiteScraper.FILE;
      return "Please save the following file as " + (colors.bold('/' + file)) + ": ";
    };

    GenericWebSiteProofGen.prototype.single_occupancy = function() {
      return false;
    };

    GenericWebSiteProofGen.prototype.display_name = function() {
      return this.remote_host;
    };

    return GenericWebSiteProofGen;

  })(BaseSigGen);

  exports.TwitterProofGen = TwitterProofGen = (function(_super) {
    __extends(TwitterProofGen, _super);

    function TwitterProofGen() {
      return TwitterProofGen.__super__.constructor.apply(this, arguments);
    }

    TwitterProofGen.prototype._binding_klass = function() {
      return proofs.TwitterBinding;
    };

    TwitterProofGen.prototype._remote_service_name = function() {
      return "twitter";
    };

    TwitterProofGen.prototype.imperative_verb = function() {
      return "tweet";
    };

    TwitterProofGen.prototype.display_name = function() {
      return "Twitter";
    };

    TwitterProofGen.prototype.instructions = function() {
      return "Please " + (colors.bold('publicly')) + " tweet the following:";
    };

    return TwitterProofGen;

  })(SocialNetworkProofGen);

  exports.GithubProofGen = GithubProofGen = (function(_super) {
    __extends(GithubProofGen, _super);

    function GithubProofGen() {
      return GithubProofGen.__super__.constructor.apply(this, arguments);
    }

    GithubProofGen.prototype._binding_klass = function() {
      return proofs.GithubBinding;
    };

    GithubProofGen.prototype._remote_service_name = function() {
      return "github";
    };

    GithubProofGen.prototype.imperative_verb = function() {
      return "post a Gist with";
    };

    GithubProofGen.prototype.display_name = function() {
      return "GitHub";
    };

    GithubProofGen.prototype.instructions = function() {
      return "Please " + (colors.bold('publicly')) + " post the following Gist, and name it " + (colors.bold(colors.red('keybase.md'))) + ":";
    };

    return GithubProofGen;

  })(SocialNetworkProofGen);

  exports.SignatureEngine = SignatureEngine = (function() {
    function SignatureEngine(_arg) {
      this.km = _arg.km;
    }

    SignatureEngine.prototype.get_km = function() {
      return this.km;
    };

    SignatureEngine.prototype.box = function(msg, cb) {
      var arg, err, out, pgp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      out = {};
      arg = {
        stdin: new Buffer(msg, 'utf8'),
        args: ["-u", this.km.get_pgp_key_id(), "--sign", "-a", "--keyid-format", "long"],
        quiet: true
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/sigs.iced",
            funcname: "SignatureEngine.box"
          });
          master_ring().gpg(arg, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return pgp = arguments[1];
              };
            })(),
            lineno: 238
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          if (typeof err === "undefined" || err === null) {
            out.pgp = pgp = pgp.toString('utf8');
            _ref = decode(pgp), err = _ref[0], msg = _ref[1];
            if (err == null) {
              out.raw = msg.body;
            }
          }
          return cb(err, out);
        };
      })(this));
    };

    return SignatureEngine;

  })();

}).call(this);
